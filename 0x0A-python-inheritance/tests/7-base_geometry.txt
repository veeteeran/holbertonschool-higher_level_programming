==============================
 How to Use 7-base_geometry.py
==============================

``integer_validator()`` checks for ints > 0

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    >>> mod_docstring = __import__('7-base_geometry').__doc__
    >>> print(len(mod_docstring) > 0)
    True

::


    >>> func_docstring = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
    >>> print(len(func_docstring) > 0)
    True

::


    >>> class_docstring = __import__('7-base_geometry').BaseGeometry.__doc__
    >>> print(len(class_docstring) > 0)
    True
::    

    >>> mod_docstring = __import__('7-base_geometry').__doc__
    >>> print(len(mod_docstring) > 0)
    True

::

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

::

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

::

    >>> bg.integer_validator("float", 3.14)
    Traceback (most recent call last):
    TypeError: float must be an integer

::

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

::

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

::

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

    >>> bg.integer_validator("list", [1, 2, 3])
    Traceback (most recent call last):
    TypeError: list must be an integer

::

    >>> bg.integer_validator("one")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'
